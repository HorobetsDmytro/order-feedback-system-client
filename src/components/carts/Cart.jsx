import React, { useEffect, useState } from 'react';
import { cartService, ordersService } from '../../services/api';
import CartItem from "./CartItem";
import { Button, Typography, Paper, Box, CircularProgress, Alert } from "@mui/material";

const Cart = () => {
    const [cart, setCart] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');
    const [successMessage, setSuccessMessage] = useState('');

    useEffect(() => {
        fetchCart();
    }, []);

    const fetchCart = async () => {
        try {
            const response = await cartService.getCart();
            setCart(response.data);
        } catch (err) {
            setError('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–æ—à–∏–∫');
        } finally {
            setLoading(false);
        }
    };

    const handleQuantityChange = async (productId, quantity) => {
        try {
            await cartService.updateQuantity(productId, quantity);
            fetchCart();
        } catch (err) {
            console.error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å:', err);
        }
    };

    const handleRemoveItem = async (productId) => {
        try {
            await cartService.removeItem(productId);
            fetchCart();
        } catch (err) {
            console.error('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä:', err);
        }
    };

    const calculateTotal = () => {
        return cart?.items.reduce((total, item) => total + (item.price * item.quantity), 0) || 0;
    };

    const handleCheckout = async () => {
        if (!cart?.items || cart.items.length === 0) {
            setError('–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π. –î–æ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä–∏ –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è–º –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.');
            return;
        }

        try {
            const orderItems = cart.items.map(item => ({
                productId: item.productId,
                quantity: item.quantity
            }));

            await ordersService.create(orderItems);

            await cartService.clearCart();
            fetchCart();

            setSuccessMessage('–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!');
            setError('');
        } catch (err) {
            console.error('–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', err);
            setError('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.');
            setSuccessMessage('');
        }
    };

    if (loading) return <Box display="flex" justifyContent="center" mt={4}><CircularProgress /></Box>;
    if (error) return <Typography color="error" textAlign="center">{error}</Typography>;

    return (
        <Box maxWidth="800px" mx="auto" mt={4} p={3} component={Paper} elevation={3} borderRadius={2}>
            <Typography variant="h4" fontWeight="bold" mb={2} textAlign="center">üõí –í–∞—à –∫–æ—à–∏–∫</Typography>
            {(!cart?.items || cart.items.length === 0) ? (
                <Typography variant="h6" textAlign="center" color="textSecondary">–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π</Typography>
            ) : (
                <>
                    {cart.items.map(item => (
                        <CartItem
                            key={item.productId}
                            item={item}
                            onQuantityChange={handleQuantityChange}
                            onRemove={handleRemoveItem}
                        />
                    ))}
                    <Box mt={3} p={2} bgcolor="whitesmoke" borderRadius={2} textAlign="right">
                        <Typography variant="h6" fontWeight="bold">–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: ${calculateTotal().toFixed(2)}</Typography>
                        <Button
                            variant="contained"
                            color="primary"
                            size="large"
                            onClick={handleCheckout}
                            sx={{ mt: 2, borderRadius: 3 }}
                        >
                            ‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                        </Button>
                    </Box>
                </>
            )}
            {successMessage && (
                <Alert severity="success" sx={{ mt: 3 }}>
                    {successMessage}
                </Alert>
            )}
        </Box>
    );
};

export default Cart;